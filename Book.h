#ifndef BOOK_H_INCLUDED                     //директива препроцессора: осуществл€ет условную компил€цию при неопределЄнности символической константы.
#define BOOK_H_INCLUDED                     //директива препроцессора: задаЄт макроопределение (макрос) или символическую константу.

using namespace std;                        //пространство стандартных имЄн.

#include<iostream>                          //заголовочный файл с классами, функци€ми и переменными дл€ организации ввода-вывода в €зыке программировани€ C++.
#include<string>                            //класс с методами и переменными дл€ организации работы со строками в €зыке программировани€ C++.
#include"Edition.h"                         //класс с методами и переменными, который мы создали дл€ работы с ним.

class Book : public Edition                 //объ€влени€ класса Book, наследуемый класс Edition.
{
private:                                    //модификатор доступа private: доступ открыт самому классу (т.е. функци€м-членам данного класса) и друзь€м (friend) данного класса - как функци€м, так и классам.
    string Author;                          //объ€вление полей класс.
    int Pages;
public:                                     //модификатор доступа public: доступ открыт всем, кто видит определение данного класса.
    Book();                                 //объ€вление конструктора без параметров.
    Book(string Title_of_Editoin, int Year_of_Edition, string Author_Name, int Page_of_Book);       //объ€вление конструктора с параметрами.
    void setAuthor(string Author_Name);     //объ€вление метода setAuthor.
    void setPages(int Page_of_Book);        //объ€вление метода setPages.
    string getAuthor() const;               //объ€вление метода getAuthor.
    int getPages() const;                   //объ€вление метода getPages.
    void print() const override;            //объ€вление переопределЄнного метода print.
    Book(const Book &pp);                   //объ€вление конструктора копировани€.
    Book operator = (const Book &pp);       //объ€вление перегрузки оператора присваивани€ (=).
    ~Book();                                //объ€вление деструктора.
};                                          //—пецификатор override: указывает, что метод класса потомка переопредел€ет метод родительского класса.

#endif // BOOK_H_INCLUDED                   //директива препроцессора: конец ветки условной компил€ции.
